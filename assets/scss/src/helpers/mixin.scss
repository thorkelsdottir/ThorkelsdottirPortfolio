// Here we define the breakpoints which will become the upper border for each media size.
// The function em-calc() calculates the em-value from a px-value.
$small-breakpoint:  em-calc(640)  !default;
$medium-breakpoint: em-calc(1024) !default;
$large-breakpoint:  em-calc(1440) !default;
$xlarge-breakpoint: em-calc(1920) !default;

// Here we define the lower and upper bounds for each media size
$small-range:   (0, $small-breakpoint) !default; /* 0, 640px */
$medium-range:  ($small-breakpoint  + em-calc(1), $medium-breakpoint) !default; /* 641px, 1024px */
$large-range:   ($medium-breakpoint + em-calc(1), $large-breakpoint)  !default; /* 1025px, 1440px */
$xlarge-range:  ($large-breakpoint  + em-calc(1), $xlarge-breakpoint) !default; /* 1441px, 1920px */
$xxlarge-range: ($xlarge-breakpoint + em-calc(1), em-calc(99999999)) !default; /* 1921px, ... */

// Media Queries
$screen: "only screen" !default;

$landscape: "#{$screen} and (orientation: landscape)" !default;
$portrait: "#{$screen} and (orientation: portrait)" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{upper-bound($small-range)})" !default;

$medium-up: "#{$screen} and (min-width:#{lower-bound($medium-range)})" !default;
$medium-only: "#{$screen} and (min-width:#{lower-bound($medium-range)}) and (max-width:#{upper-bound($medium-range)})" !default;

$large-up: "#{$screen} and (min-width:#{lower-bound($large-range)})" !default;
$large-only: "#{$screen} and (min-width:#{lower-bound($large-range)}) and (max-width:#{upper-bound($large-range)})" !default;

$xlarge-up: "#{$screen} and (min-width:#{lower-bound($xlarge-range)})" !default;
$xlarge-only: "#{$screen} and (min-width:#{lower-bound($xlarge-range)}) and (max-width:#{upper-bound($xlarge-range)})" !default;

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)})" !default;
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound($xxlarge-range)}) and (max-width:#{upper-bound($xxlarge-range)})" !default;

$retina: (
  "#{$screen} and (-webkit-min-device-pixel-ratio: 2)",
  "#{$screen} and (min--moz-device-pixel-ratio: 2)",
  "#{$screen} and (-o-min-device-pixel-ratio: 2/1)",
  "#{$screen} and (min-device-pixel-ratio: 2)",
  "#{$screen} and (min-resolution: 192dpi)",
  "#{$screen} and (min-resolution: 2dppx)"
);


// simple breakpoint mixin
@mixin bp($size) {
  @media only screen and (max-width : $size + px) {
    @content;
  }
}

@function angle ($deg) {
  @if type-of($deg) == 'number' {
    @return mod(abs($deg - 450), 360deg);
  } @else {
    $position: to + " ";
    @each $pos in $deg {
      $position: $position + opposite-position($pos) + " ";
    }

    @return $position;
  }
}

@function helper-gradient-angle ($direction) {

  $old-direction: $direction;
  $veryold-direction: $direction;

  // New Syntax has to be evaluated to old one
  @if $direction == 'to bottom' {
    $old-direction: 'top';
  } @else
  if $direction == 'to right' {
    $old-direction: 'left';
  } @else
  if $direction == 'to top' {
    $old-direction: 'bottom';
  } @else
  if $direction == 'to left' {
    $old-direction: 'right';
  } @else {
    $old-direction: angle($direction);
  }

  // And also for very old syntax
  @if $direction == 'to bottom' {
    $veryold-direction: 'left top, left bottom';
  } @else
  if $direction == 'to right' {
    $veryold-direction: 'top left, bottom right';
  } @else
  if $direction == 'to top' {
    $veryold-direction: 'left bottom, left top';
  } @else
  if $direction == 'to left' {
    $veryold-direction: 'top right, bottom left';
  } @else {
    $veryold-direction: angle($direction);
  }

  @return $old-direction, $veryold-direction;
}

@mixin x-linear-gradient ($direction: 'to right', $fallback: #ccc, $from: #ccc, $to: #aaa) {

  $directions: helper-gradient-angle($direction);

  // Provide a fallback-color
  background-color: $fallback;

  // Cross-browser linear-gradients
  background-image: -webkit-gradient(linear, unquote(nth($directions, 2)), from($from), to($to)); // Android 2.1-3.0
  background-image: -webkit-linear-gradient(unquote(nth($directions, 1)), $from, $to);
  background-image: linear-gradient(unquote($direction), $from, $to);
}
